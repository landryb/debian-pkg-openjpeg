Description: missing java installation rules
Author: Mathieu Malaterre <malat@debian.org>
Forwarded: http://code.google.com/p/openjpeg/source/detail?r=1636
Last-Update: 2012-04-20

Index: openjpeg-1.5.0/applications/JavaOpenJPEG/CMakeLists.txt
===================================================================
--- openjpeg-1.5.0.orig/applications/JavaOpenJPEG/CMakeLists.txt	2012-04-19 14:27:17.013900193 +0200
+++ openjpeg-1.5.0/applications/JavaOpenJPEG/CMakeLists.txt	2012-04-19 14:27:26.569937384 +0200
@@ -4,6 +4,9 @@
 SET(openjpegjni_SRCS
   JavaOpenJPEGDecoder.c
   JavaOpenJPEG.c
+  ../codec/index.c
+  ../codec/convert.c
+${OPENJPEG_SOURCE_DIR}/applications/common/opj_getopt.c
   )
 
 # JNI binding:
@@ -20,6 +23,18 @@
 add_library(openjpegjni MODULE
   ${openjpegjni_SRCS}
   )
+TARGET_LINK_LIBRARIES(openjpegjni ${OPENJPEG_LIBRARY_NAME})
+
+IF(WIN32)
+  SET(OPENJPEG_INSTALL_JNI_DIR ${OPENJPEG_INSTALL_BIN_DIR})
+ELSE()
+  SET(OPENJPEG_INSTALL_JNI_DIR ${OPENJPEG_INSTALL_LIB_DIR})
+ENDIF()
+
+INSTALL(TARGETS openjpegjni
+  EXPORT OpenJPEGTargets
+  LIBRARY DESTINATION ${OPENJPEG_INSTALL_JNI_DIR}/jni COMPONENT Libraries
+)
 
 # build jar:
 FIND_PACKAGE(Java 1.5 REQUIRED) # javac, jar
@@ -45,3 +60,7 @@
   DEPENDS ${LIBRARY_OUTPUT_PATH}/openjpeg.jar
   COMMENT "building openjpeg.jar"
 )
+
+INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/openjpeg.jar
+  DESTINATION ${OPENJPEG_INSTALL_SHARE_DIR} COMPONENT JavaModule
+)
Index: openjpeg-1.5.0/applications/jpip/util/CMakeLists.txt
===================================================================
--- openjpeg-1.5.0.orig/applications/jpip/util/CMakeLists.txt	2012-04-19 14:29:10.737939774 +0200
+++ openjpeg-1.5.0/applications/jpip/util/CMakeLists.txt	2012-04-19 14:29:14.089441659 +0200
@@ -47,81 +47,95 @@
 ENDFOREACH(exe)
 
 # Build the two java clients:
-FIND_PACKAGE(Java 1.5 REQUIRED) # javac, jar
+FIND_PACKAGE(Java 1.5 COMPONENTS Development) # javac, jar
 
-# 1. opj_viewer
-# build dep list:
-file(GLOB java1_srcs "opj_viewer/src/*.java")
-
-# make sure target javac dir exists:
-file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/classes1)
-# Build java
-ADD_CUSTOM_COMMAND(
-  OUTPUT ${LIBRARY_OUTPUT_PATH}/opj_viewer.jar
-  COMMAND ${Java_JAVAC_EXECUTABLE} 
-  ${java1_srcs} -d ${CMAKE_CURRENT_BINARY_DIR}/classes1
-  COMMAND ${Java_JAR_EXECUTABLE} cfm ${LIBRARY_OUTPUT_PATH}/opj_viewer.jar
-  ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/dist/manifest.txt -C
-  ${CMAKE_CURRENT_BINARY_DIR}/classes1 .
-  DEPENDS ${java1_srcs}
-  ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/dist/manifest.txt
-  COMMENT "javac *.java; jar cvf -> opj_viewer.jar"
-)
-
-# name the target
-ADD_CUSTOM_TARGET(OPJViewerJar ALL
-  DEPENDS ${LIBRARY_OUTPUT_PATH}/opj_viewer.jar
-  COMMENT "building opj_viewer.jar"
-)
-
-# 2. opj_viewer_xerces
-# search for package org.apache.xerces.parsers
-find_file(APACHE_XERCES_JAR
-  NAMES xerces-j2.jar xercesImpl.jar
-  PATHS /usr/share/java/
-  NO_DEFAULT_PATH
-  )
-mark_as_advanced(APACHE_XERCES_JAR)
-
-if(EXISTS ${APACHE_XERCES_JAR})
-  configure_file(
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer_xerces/dist/manifest.txt.in
-    ${CMAKE_CURRENT_BINARY_DIR}/opj_viewer_xerces/dist/manifest.txt
-    @ONLY
-    )
+# Only build the java viewer if dev is found:
+if(Java_Development_FOUND AND Java_JAVAC_EXECUTABLE)
+  set(jflags $ENV{JFLAGS})
+  # 1. opj_viewer
   # build dep list:
-  file(GLOB java2_srcs "opj_viewer_xerces/src/*.java")
-
-  # Need some common files:
-  list(APPEND java2_srcs
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/ImageManager.java
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/ImgdecClient.java
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/JPIPHttpClient.java
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/MML.java
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/PnmImage.java
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/RegimViewer.java
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/ResizeListener.java
-    )
+  file(GLOB java1_srcs "opj_viewer/src/*.java")
 
   # make sure target javac dir exists:
-  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/classes2)
+  file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/classes1)
   # Build java
   ADD_CUSTOM_COMMAND(
-    OUTPUT ${LIBRARY_OUTPUT_PATH}/opj_viewer_xerces.jar
-    COMMAND ${Java_JAVAC_EXECUTABLE} 
-    -classpath ${APACHE_XERCES_JAR}
-    ${java2_srcs} -d ${CMAKE_CURRENT_BINARY_DIR}/classes2
-    COMMAND ${Java_JAR_EXECUTABLE} cfm ${LIBRARY_OUTPUT_PATH}/opj_viewer_xerces.jar
-    ${CMAKE_CURRENT_BINARY_DIR}/opj_viewer_xerces/dist/manifest.txt 
-    -C ${CMAKE_CURRENT_BINARY_DIR}/classes2 .
-    DEPENDS ${java2_srcs}
-    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer_xerces/dist/manifest.txt.in
-    COMMENT "javac *.java; jar cvf -> opj_viewer_xerces.jar"
+    OUTPUT ${LIBRARY_OUTPUT_PATH}/opj_viewer.jar
+    COMMAND ${Java_JAVAC_EXECUTABLE} ${jflags}
+    ${java1_srcs} -d ${CMAKE_CURRENT_BINARY_DIR}/classes1
+    COMMAND ${Java_JAR_EXECUTABLE} cfm ${LIBRARY_OUTPUT_PATH}/opj_viewer.jar
+    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/dist/manifest.txt -C
+    ${CMAKE_CURRENT_BINARY_DIR}/classes1 .
+    DEPENDS ${java1_srcs}
+    ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/dist/manifest.txt
+    COMMENT "javac *.java; jar cvf -> opj_viewer.jar"
     )
 
   # name the target
-  ADD_CUSTOM_TARGET(OPJViewerXercesJar ALL
-    DEPENDS ${LIBRARY_OUTPUT_PATH}/opj_viewer_xerces.jar
-    COMMENT "building opj_viewer_xerces.jar"
+  ADD_CUSTOM_TARGET(OPJViewerJar ALL
+    DEPENDS ${LIBRARY_OUTPUT_PATH}/opj_viewer.jar
+    COMMENT "building opj_viewer.jar"
+    )
+
+  INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/opj_viewer.jar
+    DESTINATION ${OPENJPEG_INSTALL_SHARE_DIR} COMPONENT JavaModule
+    )
+
+  # 2. opj_viewer_xerces
+  # search for package org.apache.xerces.parsers
+  find_file(APACHE_XERCES_JAR
+    NAMES xerces-j2.jar xercesImpl.jar
+    PATHS /usr/share/java/
+    NO_DEFAULT_PATH
     )
+  mark_as_advanced(APACHE_XERCES_JAR)
+
+  if(EXISTS ${APACHE_XERCES_JAR})
+    configure_file(
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer_xerces/dist/manifest.txt.in
+      ${CMAKE_CURRENT_BINARY_DIR}/opj_viewer_xerces/dist/manifest.txt
+      @ONLY
+      )
+    # build dep list:
+    file(GLOB java2_srcs "opj_viewer_xerces/src/*.java")
+
+    # Need some common files:
+    list(APPEND java2_srcs
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/ImageManager.java
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/ImgdecClient.java
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/JPIPHttpClient.java
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/MML.java
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/PnmImage.java
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/RegimViewer.java
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer/src/ResizeListener.java
+      )
+
+    # make sure target javac dir exists:
+    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/classes2)
+    # Build java
+    ADD_CUSTOM_COMMAND(
+      OUTPUT ${LIBRARY_OUTPUT_PATH}/opj_viewer_xerces.jar
+      COMMAND ${Java_JAVAC_EXECUTABLE} ${jflags}
+      -classpath ${APACHE_XERCES_JAR}
+      ${java2_srcs} -d ${CMAKE_CURRENT_BINARY_DIR}/classes2
+      COMMAND ${Java_JAR_EXECUTABLE} cfm ${LIBRARY_OUTPUT_PATH}/opj_viewer_xerces.jar
+      ${CMAKE_CURRENT_BINARY_DIR}/opj_viewer_xerces/dist/manifest.txt 
+      -C ${CMAKE_CURRENT_BINARY_DIR}/classes2 .
+      DEPENDS ${java2_srcs}
+      ${CMAKE_CURRENT_SOURCE_DIR}/opj_viewer_xerces/dist/manifest.txt.in
+      COMMENT "javac *.java; jar cvf -> opj_viewer_xerces.jar"
+      )
+
+    # name the target
+    ADD_CUSTOM_TARGET(OPJViewerXercesJar ALL
+      DEPENDS ${LIBRARY_OUTPUT_PATH}/opj_viewer_xerces.jar
+      COMMENT "building opj_viewer_xerces.jar"
+      )
+
+    INSTALL(FILES ${LIBRARY_OUTPUT_PATH}/opj_viewer_xerces.jar
+      DESTINATION ${OPENJPEG_INSTALL_SHARE_DIR} COMPONENT JavaModule
+      )
+  endif()
+else(Java_Development_FOUND)
+  message(WARNING "No java compiler found. Wont be able to build java viewer")
 endif()
